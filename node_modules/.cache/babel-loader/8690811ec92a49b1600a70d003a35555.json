{"ast":null,"code":"var _jsxFileName = \"/Users/han/Documents/GitHub/ABC/legal assistant/React/my-chatbot-app/src/ChatbotUI.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nconst ChatbotUI = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const effectRan = useRef(false);\n  const sendMessage = async message => {\n    setIsLoading(true);\n    setMessages(prevMessages => [...prevMessages, {\n      text: message,\n      sender: 'user'\n    }]);\n    setInput('');\n    try {\n      console.log('Sending message:', message);\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      console.log('Response received');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) {\n          console.log('Stream complete');\n          break;\n        }\n        const chunk = decoder.decode(value);\n        console.log('Received chunk:', chunk);\n        const lines = chunk.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              console.log('Parsed event data:', eventData);\n              if (eventData.fullResponse) {\n                setMessages(prevMessages => [...prevMessages, {\n                  text: eventData.fullResponse,\n                  sender: 'bot',\n                  citations: eventData.citations\n                }]);\n              }\n            } catch (error) {\n              console.error('Error parsing event data:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Sorry, there was an error processing your request.\",\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (effectRan.current === false) {\n      sendMessage('Hello, AI Assistant!');\n      return () => effectRan.current = true;\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex flex-col h-screen max-w-2xl mx-auto p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-2xl font-bold mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"AI Assistant\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-1 overflow-y-auto mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, messages.map((message, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: `mb-2 ${message.sender === 'user' ? 'text-right' : 'text-left'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `inline-block p-2 rounded-lg ${message.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, message.sender === 'user' ? message.text : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactMarkdown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 19\n    }\n  }, message.text), message.citations && message.citations.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2 text-sm text-gray-600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 23\n    }\n  }, \"Citations:\"), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 23\n    }\n  }, message.citations.map((citation, idx) => {\n    const displayUrl = citation.mappedUrl || citation.originalUrl;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }, \"[\", citation.index, \"]\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n      href: displayUrl,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      className: \"text-blue-500 hover:underline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 31\n      }\n    }, displayUrl), citation.error && ` (${citation.error})`);\n  })))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: input,\n    onChange: e => setInput(e.target.value),\n    onKeyPress: e => e.key === 'Enter' && !isLoading && input.trim() && sendMessage(input),\n    placeholder: \"Type a message...\",\n    className: \"flex-1 p-2 border rounded-l-lg\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => !isLoading && input.trim() && sendMessage(input),\n    className: \"p-2 bg-blue-500 text-white rounded-r-lg\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n};\nexport default ChatbotUI;","map":{"version":3,"names":["React","useState","useEffect","useRef","ReactMarkdown","ChatbotUI","messages","setMessages","input","setInput","isLoading","setIsLoading","effectRan","sendMessage","message","prevMessages","text","sender","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","eventData","parse","slice","fullResponse","citations","error","current","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","index","key","Fragment","length","citation","idx","displayUrl","mappedUrl","originalUrl","href","target","rel","type","onChange","e","onKeyPress","trim","placeholder","disabled","onClick"],"sources":["/Users/han/Documents/GitHub/ABC/legal assistant/React/my-chatbot-app/src/ChatbotUI.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nconst ChatbotUI = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const effectRan = useRef(false);\n\n  const sendMessage = async (message) => {\n    setIsLoading(true);\n    setMessages(prevMessages => [...prevMessages, { text: message, sender: 'user' }]);\n    setInput('');\n\n    try {\n      console.log('Sending message:', message);\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      console.log('Response received');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          console.log('Stream complete');\n          break;\n        }\n        \n        const chunk = decoder.decode(value);\n        console.log('Received chunk:', chunk);\n        const lines = chunk.split('\\n');\n        \n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              console.log('Parsed event data:', eventData);\n              if (eventData.fullResponse) {\n                setMessages(prevMessages => [\n                  ...prevMessages,\n                  { \n                    text: eventData.fullResponse, \n                    sender: 'bot',\n                    citations: eventData.citations\n                  }\n                ]);\n              }\n            } catch (error) {\n              console.error('Error parsing event data:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prevMessages => [\n        ...prevMessages,\n        { text: \"Sorry, there was an error processing your request.\", sender: 'bot' }\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (effectRan.current === false) {\n      sendMessage('Hello, AI Assistant!');\n      return () => effectRan.current = true;\n    }\n  }, []);\n\n  return (\n    <div className=\"flex flex-col h-screen max-w-2xl mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-4\">AI Assistant</h1>\n      <div className=\"flex-1 overflow-y-auto mb-4\">\n        {messages.map((message, index) => (\n          <div key={index} className={`mb-2 ${message.sender === 'user' ? 'text-right' : 'text-left'}`}>\n            <span className={`inline-block p-2 rounded-lg ${message.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}>\n              {message.sender === 'user' ? (\n                message.text\n              ) : (\n                <>\n                  <ReactMarkdown>{message.text}</ReactMarkdown>\n                  {message.citations && message.citations.length > 0 && (\n                    <div className=\"mt-2 text-sm text-gray-600\">\n                      <strong>Citations:</strong>\n                      <ol>\n                        {message.citations.map((citation, idx) => {\n                          const displayUrl = citation.mappedUrl || citation.originalUrl;\n                          return (\n                            <li key={idx}>\n                              [{citation.index}]{' '}\n                              <a \n                                href={displayUrl}\n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\" \n                                className=\"text-blue-500 hover:underline\"\n                              >\n                                {displayUrl}\n                              </a>\n                              {citation.error && ` (${citation.error})`}\n                            </li>\n                          );\n                        })}\n                      </ol>\n                    </div>\n                  )}\n                </>\n              )}\n            </span>\n          </div>\n        ))}\n      </div>\n      <div className=\"flex\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && !isLoading && input.trim() && sendMessage(input)}\n          placeholder=\"Type a message...\"\n          className=\"flex-1 p-2 border rounded-l-lg\"\n          disabled={isLoading}\n        />\n        <button\n          onClick={() => !isLoading && input.trim() && sendMessage(input)}\n          className=\"p-2 bg-blue-500 text-white rounded-r-lg\"\n          disabled={isLoading}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}