{"ast":null,"code":"var _jsxFileName = \"/Users/han/Documents/GitHub/ABC/legal assistant/React/my-chatbot-app/src/ChatbotUI.js\";\nimport React, { useState, useEffect } from 'react';\nconst ChatbotUI = () => {\n  const [input, setInput] = useState('');\n  const sendMessage = async message => {\n    console.log('Sending message:', message);\n    try {\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      console.log('Response received');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) {\n          console.log('Stream complete');\n          break;\n        }\n        const chunk = decoder.decode(value);\n        console.log('Received chunk:', chunk);\n        const lines = chunk.split('\\n\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              console.log('Parsed event data:', eventData);\n            } catch (error) {\n              console.error('Error parsing event data:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  useEffect(() => {\n    // Send a test message when the component mounts\n    sendMessage('Hello, AI Assistant!');\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"AI Assistant (Debug Mode)\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, \"Check the console for logs.\"));\n};\nexport default ChatbotUI;","map":{"version":3,"names":["React","useState","useEffect","ChatbotUI","input","setInput","sendMessage","message","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","eventData","parse","slice","error","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/han/Documents/GitHub/ABC/legal assistant/React/my-chatbot-app/src/ChatbotUI.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ChatbotUI = () => {\n  const [input, setInput] = useState('');\n\n  const sendMessage = async (message) => {\n    console.log('Sending message:', message);\n    try {\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      console.log('Response received');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          console.log('Stream complete');\n          break;\n        }\n        \n        const chunk = decoder.decode(value);\n        console.log('Received chunk:', chunk);\n        const lines = chunk.split('\\n\\n');\n        \n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              console.log('Parsed event data:', eventData);\n            } catch (error) {\n              console.error('Error parsing event data:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Send a test message when the component mounts\n    sendMessage('Hello, AI Assistant!');\n  }, []);\n\n  return (\n    <div>\n      <h1>AI Assistant (Debug Mode)</h1>\n      <p>Check the console for logs.</p>\n    </div>\n  );\n};\n\nexport default ChatbotUI;\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMK,WAAW,GAAG,MAAOC,OAAO,IAAK;IACrCC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,OAAO,CAAC;IACxC,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;QAC7DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET;QAAQ,CAAC;MAClC,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEAV,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC,MAAMU,MAAM,GAAGT,QAAQ,CAACI,IAAI,CAACM,SAAS,CAAC,CAAC;MACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;MAEjC,OAAO,IAAI,EAAE;QACX,MAAM;UAAEC,IAAI;UAAEC;QAAM,CAAC,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,CAAC;QAC3C,IAAIF,IAAI,EAAE;UACRf,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B;QACF;QAEA,MAAMiB,KAAK,GAAGL,OAAO,CAACM,MAAM,CAACH,KAAK,CAAC;QACnChB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEiB,KAAK,CAAC;QACrC,MAAME,KAAK,GAAGF,KAAK,CAACG,KAAK,CAAC,MAAM,CAAC;QAEjC,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;UACxB,IAAIE,IAAI,CAACC,UAAU,CAAC,QAAQ,CAAC,EAAE;YAC7B,IAAI;cACF,MAAMC,SAAS,GAAGjB,IAAI,CAACkB,KAAK,CAACH,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;cAC3C1B,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEuB,SAAS,CAAC;YAC9C,CAAC,CAAC,OAAOG,KAAK,EAAE;cACd3B,OAAO,CAAC2B,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;YACnD;UACF;QACF;MACF;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd3B,OAAO,CAAC2B,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAEDjC,SAAS,CAAC,MAAM;IACd;IACAI,WAAW,CAAC,sBAAsB,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEN,KAAA,CAAAoC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACE1C,KAAA,CAAAoC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,2BAA6B,CAAC,eAClC1C,KAAA,CAAAoC,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAG,6BAA8B,CAC9B,CAAC;AAEV,CAAC;AAED,eAAevC,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}