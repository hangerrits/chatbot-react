{"ast":null,"code":"import React, { useState } from 'react';\nimport { Send, Bot, User } from 'lucide-react';\nimport ReactMarkdown from 'react-markdown';\nconst ChatbotUI = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState('');\n  const sendMessage = async message => {\n    setIsLoading(true);\n    setMessages(prevMessages => [...prevMessages, {\n      text: message,\n      sender: 'user'\n    }]);\n    setCurrentResponse('');\n    try {\n      console.log('Sending message:', message);\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      console.log('Response received');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) {\n          console.log('Stream complete');\n          break;\n        }\n        const chunk = decoder.decode(value);\n        console.log('Received chunk:', chunk);\n        const lines = chunk.split('\\n\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              console.log('Parsed event data:', eventData);\n              if (eventData.text) {\n                setCurrentResponse(prev => prev + eventData.text);\n              } else if (eventData.fullResponse) {\n                setMessages(prevMessages => [...prevMessages, {\n                  text: eventData.fullResponse,\n                  sender: 'bot',\n                  citations: eventData.citations\n                }]);\n                setCurrentResponse('');\n              }\n            } catch (error) {\n              console.error('Error parsing event data:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        text: \"Sorry, there was an error processing your request.\",\n        sender: 'bot'\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleSend = async () => {\n    if (input.trim()) {\n      setInput('');\n      await sendMessage(input);\n    }\n  };\n\n  // Rest of the component remains the same...\n};\nexport default ChatbotUI;","map":{"version":3,"names":["React","useState","Send","Bot","User","ReactMarkdown","ChatbotUI","messages","setMessages","input","setInput","isLoading","setIsLoading","currentResponse","setCurrentResponse","sendMessage","message","prevMessages","text","sender","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","eventData","parse","slice","prev","fullResponse","citations","error","handleSend","trim"],"sources":["/Users/han/Documents/GitHub/ABC/legal assistant/React/my-chatbot-app/src/ChatbotUI.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Send, Bot, User } from 'lucide-react';\nimport ReactMarkdown from 'react-markdown';\n\nconst ChatbotUI = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentResponse, setCurrentResponse] = useState('');\n\n  const sendMessage = async (message) => {\n    setIsLoading(true);\n    setMessages(prevMessages => [...prevMessages, { text: message, sender: 'user' }]);\n    setCurrentResponse('');\n\n    try {\n      console.log('Sending message:', message);\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      console.log('Response received');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          console.log('Stream complete');\n          break;\n        }\n        \n        const chunk = decoder.decode(value);\n        console.log('Received chunk:', chunk);\n        const lines = chunk.split('\\n\\n');\n        \n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              console.log('Parsed event data:', eventData);\n              if (eventData.text) {\n                setCurrentResponse(prev => prev + eventData.text);\n              } else if (eventData.fullResponse) {\n                setMessages(prevMessages => [\n                  ...prevMessages,\n                  { \n                    text: eventData.fullResponse, \n                    sender: 'bot',\n                    citations: eventData.citations \n                  }\n                ]);\n                setCurrentResponse('');\n              }\n            } catch (error) {\n              console.error('Error parsing event data:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prevMessages => [\n        ...prevMessages,\n        { text: \"Sorry, there was an error processing your request.\", sender: 'bot' }\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSend = async () => {\n    if (input.trim()) {\n      setInput('');\n      await sendMessage(input);\n    }\n  };\n\n  // Rest of the component remains the same...\n\n};\n\nexport default ChatbotUI;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}