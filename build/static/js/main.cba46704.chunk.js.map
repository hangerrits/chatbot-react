{"version":3,"sources":["ChatbotUI.js","App.js","reportWebVitals.js","index.js"],"names":["ChatbotUI","messages","setMessages","useState","input","setInput","isLoading","setIsLoading","isAuthenticated","setIsAuthenticated","password","setPassword","effectRan","useRef","handleLogin","e","preventDefault","alert","sendMessage","async","message","trim","prevMessages","text","sender","response","fetch","method","headers","body","JSON","stringify","ok","Error","reader","getReader","decoder","TextDecoder","done","value","read","console","log","chunk","decode","lines","split","line","startsWith","eventData","parse","slice","fullResponse","citations","error","useEffect","current","React","createElement","style","padding","fontFamily","marginBottom","textAlign","src","alt","maxWidth","height","display","width","paddingRight","fontSize","fontWeight","border","borderRadius","overflowY","map","index","key","backgroundColor","ReactMarkdown","length","className","citation","idx","displayUrl","mappedUrl","originalUrl","href","target","rel","concat","type","onChange","onKeyPress","placeholder","flexGrow","disabled","onClick","handleSendMessage","color","cursor","paddingLeft","textDecoration","justifyContent","alignItems","onSubmit","marginRight","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2OA2OkBA,MAxOAA,KAChB,MAAOC,EAAUC,GAAeC,mBAAS,KAClCC,EAAOC,GAAYF,mBAAS,KAC5BG,EAAWC,GAAgBJ,oBAAS,IAClCK,EAAiBC,GAAsBN,oBAAS,IAChDO,EAAUC,GAAeR,mBAAS,IACnCS,EAAYC,kBAAO,GAInBC,EAAeC,IACnBA,EAAEC,iBAHoB,eAIlBN,EACFD,GAAmB,GAEnBQ,MAAM,0CAGNC,EAAcC,UAClB,GAAuB,KAAnBC,EAAQC,OAAZ,CAEAd,GAAa,GACbL,EAAYoB,GAAgB,IAAIA,EAAc,CAAEC,KAAMH,EAASI,OAAQ,UACvEnB,EAAS,IAET,IACE,MAAMoB,QAAiBC,MAAM,iCAAkC,CAC7DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEX,cAGzB,IAAKK,EAASO,GACZ,MAAM,IAAIC,MAAM,+BAGlB,MAAMC,EAAST,EAASI,KAAKM,YACvBC,EAAU,IAAIC,YAEpB,OAAa,CACX,MAAM,KAAEC,EAAI,MAAEC,SAAgBL,EAAOM,OACrC,GAAIF,EAAM,CACRG,QAAQC,IAAI,mBACZ,MAGF,MAAMC,EAAQP,EAAQQ,OAAOL,GAC7BE,QAAQC,IAAI,kBAAmBC,GAC/B,MAAME,EAAQF,EAAMG,MAAM,MAE1B,IAAK,MAAMC,KAAQF,EACjB,GAAIE,EAAKC,WAAW,UAClB,IACE,MAAMC,EAAYnB,KAAKoB,MAAMH,EAAKI,MAAM,IACxCV,QAAQC,IAAI,qBAAsBO,GAC9BA,EAAUG,cACZlD,EAAYoB,GAAgB,IACvBA,EACH,CACEC,KAAM0B,EAAUG,aAChB5B,OAAQ,MACR6B,UAAWJ,EAAUI,aAI3B,MAAOC,GACPb,QAAQa,MAAM,4BAA6BA,KAKnD,MAAOA,GACPb,QAAQa,MAAM,SAAUA,GACxBpD,EAAYoB,GAAgB,IACvBA,EACH,CAAEC,KAAM,qDAAsDC,OAAQ,SAEzE,QACCjB,GAAa,MA2Bd,OAPDgD,oBAAU,KACP,GAAI/C,IAAyC,IAAtBI,EAAU4C,QAE/B,OADAtC,EAAY,qCACL,IAAMN,EAAU4C,SAAU,GAElC,CAAChD,IAECA,EA2BHiD,IAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,WAAY,sBACzCJ,IAAAC,cAAA,OAAKC,MAAO,CAAEG,aAAc,OAAQC,UAAW,WAC7CN,IAAAC,cAAA,OAAKM,IAAI,gBAAgBC,IAAI,eAAeN,MAAO,CAAEO,SAAU,QAASC,OAAQ,WAGlFV,IAAAC,cAAA,OAAKC,MAAO,CAAES,QAAS,OAAQN,aAAc,SAC3CL,IAAAC,cAAA,OAAKC,MAAO,CAAEU,MAAO,KAAMC,aAAc,SACvCb,IAAAC,cAAA,MAAIC,MAAO,CAAEY,SAAU,OAAQC,WAAY,OAAQV,aAAc,UACjEL,IAAAC,cAAA,KAAGC,MAAO,CAAEY,SAAU,WAGxBd,IAAAC,cAAA,OAAKC,MAAO,CAAEU,MAAO,QACnBZ,IAAAC,cAAA,MAAIC,MAAO,CAAEY,SAAU,OAAQC,WAAY,OAAQV,aAAc,OAAQC,UAAW,WAAY,0BAChGN,IAAAC,cAAA,OAAKC,MAAO,CAAEc,OAAQ,iBAAkBC,aAAc,MAAOP,OAAQ,QAASQ,UAAW,OAAQb,aAAc,OAAQF,QAAS,SAC7H3D,EAAS2E,IAAI,CAACxD,EAASyD,IACtBpB,IAAAC,cAAA,OAAKoB,IAAKD,EAAOlB,MAAO,CAAEG,aAAc,OAAQC,UAA8B,SAAnB3C,EAAQI,OAAoB,QAAU,SAC/FiC,IAAAC,cAAA,QAAMC,MAAO,CACXS,QAAS,eACTR,QAAS,WACTc,aAAc,OACdK,gBAAoC,SAAnB3D,EAAQI,OAAoB,UAAY,UACzD0C,SAAU,QAEVT,IAAAC,cAACsB,IAAa,KAAE5D,EAAQG,OAEzBH,EAAQiC,WAAajC,EAAQiC,UAAU4B,OAAS,GAC/CxB,IAAAC,cAAA,OAAKwB,UAAU,8BACbzB,IAAAC,cAAA,cAAQ,YACRD,IAAAC,cAAA,UACGtC,EAAQiC,UAAUuB,IAAI,CAACO,EAAUC,KAChC,MAAMC,EAAaF,EAASG,WAAaH,EAASI,YAClD,OACE9B,IAAAC,cAAA,MAAIoB,IAAKM,GAAK,IACVD,EAASN,MAAM,IAAE,IACnBpB,IAAAC,cAAA,KACE8B,KAAMH,EACNI,OAAO,SACPC,IAAI,sBACJR,UAAU,iCAETG,GAEFF,EAAS7B,OAAK,KAAAqC,OAASR,EAAS7B,MAAK,aAUxDG,IAAAC,cAAA,OAAKC,MAAO,CAAES,QAAS,SACrBX,IAAAC,cAAA,SACEkC,KAAK,OACLrD,MAAOnC,EACPyF,SA1GY9E,IACzBV,EAASU,EAAE0E,OAAOlD,QA0GLuD,WAjGS/E,IACR,UAAVA,EAAE+D,MAAoBxE,GAAaF,EAAMiB,QAC3CH,EAAYd,IAgGD2F,YAAY,oBACZpC,MAAO,CAAEqC,SAAU,EAAGpC,QAAS,MAAOc,aAAc,cAAeD,OAAQ,kBAC3EwB,SAAU3F,IAEZmD,IAAAC,cAAA,UACEwC,QA7GWC,MACnB7F,GAAaF,EAAMiB,QACtBH,EAAYd,IA4GDuD,MAAO,CACLC,QAAS,WACTmB,gBAAiB,UACjBqB,MAAO,QACP3B,OAAQ,OACRC,aAAc,cACd2B,OAAQ,WAEVJ,SAAU3F,GACX,UAMLmD,IAAAC,cAAA,OAAKC,MAAO,CAAEU,MAAO,KAAMiC,YAAa,SACtC7C,IAAAC,cAAA,MAAIC,MAAO,CAAEY,SAAU,OAAQC,WAAY,OAAQV,aAAc,UACjEL,IAAAC,cAAA,KAAGC,MAAO,CAAEY,SAAU,YAI1Bd,IAAAC,cAAA,OAAKC,MAAO,CAAEI,UAAW,WACvBN,IAAAC,cAAA,OAAKM,IAAI,uBAAuBC,IAAI,eAAeN,MAAO,CAAEO,SAAU,QAASC,OAAQ,UACvFV,IAAAC,cAAA,SAAG,qFACkF,IACnFD,IAAAC,cAAA,KAAG8B,KAAK,gCAAgC7B,MAAO,CAAEyC,MAAO,UAAWG,eAAgB,SAAU,oBAlHjG9C,IAAAC,cAAA,OAAKC,MAAO,CAAES,QAAS,OAAQoC,eAAgB,SAAUC,WAAY,SAAUtC,OAAQ,UACrFV,IAAAC,cAAA,QAAMgD,SAAU5F,EAAa6C,MAAO,CAAEI,UAAW,WAC/CN,IAAAC,cAAA,MAAIC,MAAO,CAAEG,aAAc,SAAU,kBACrCL,IAAAC,cAAA,SACEkC,KAAK,WACLrD,MAAO7B,EACPmF,SAAW9E,GAAMJ,EAAYI,EAAE0E,OAAOlD,OACtCoB,MAAO,CAAEC,QAAS,MAAO+C,YAAa,UAExClD,IAAAC,cAAA,UAAQkC,KAAK,SAASjC,MAAO,CAC3BC,QAAS,WACTmB,gBAAiB,UACjBqB,MAAO,QACP3B,OAAQ,OACRC,aAAc,MACd2B,OAAQ,YACP,YC7HhB5D,QAAQC,IAAI,aAAc1C,GAUX4G,MARf,WACE,OACEnD,IAAAC,cAAA,OAAKwB,UAAU,OACZlF,EAAYyD,IAAAC,cAAC1D,EAAS,MAAMyD,IAAAC,cAAA,SAAG,0BCIvBmD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHlE,IAAAC,cAACD,IAAMmE,WAAU,KACfnE,IAAAC,cAACkD,EAAG,QAORC,M","file":"static/js/main.cba46704.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\n\nconst ChatbotUI = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [password, setPassword] = useState('');\n    const effectRan = useRef(false);\n\n    const correctPassword = 'CheckItOut'; // Replace with your desired password\n\n    const handleLogin = (e) => {\n      e.preventDefault();\n      if (password === correctPassword) {\n        setIsAuthenticated(true);\n      } else {\n        alert('Incorrect password. Please try again.');\n      }\n    };\n  const sendMessage = async (message) => {\n    if (message.trim() === '') return;\n\n    setIsLoading(true);\n    setMessages(prevMessages => [...prevMessages, { text: message, sender: 'user' }]);\n    setInput('');\n\n    try {\n      const response = await fetch('http://localhost:3001/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          console.log('Stream complete');\n          break;\n        }\n        \n        const chunk = decoder.decode(value);\n        console.log('Received chunk:', chunk);\n        const lines = chunk.split('\\n');\n        \n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const eventData = JSON.parse(line.slice(6));\n              console.log('Parsed event data:', eventData);\n              if (eventData.fullResponse) {\n                setMessages(prevMessages => [\n                  ...prevMessages,\n                  {\n                    text: eventData.fullResponse,\n                    sender: 'bot',\n                    citations: eventData.citations\n                  }\n                ]);\n              }\n            } catch (error) {\n              console.error('Error parsing event data:', error);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n      setMessages(prevMessages => [\n        ...prevMessages,\n        { text: \"Sorry, there was an error processing your request.\", sender: 'bot' }\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (!isLoading && input.trim()) {\n      sendMessage(input);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && !isLoading && input.trim()) {\n      sendMessage(input);\n    }\n  };\n\n    useEffect(() => {\n       if (isAuthenticated && effectRan.current === false) {\n         sendMessage('Hallo, AI Aanbestedingsassistent!');\n         return () => effectRan.current = true;\n       }\n     }, [isAuthenticated]);\n\n     if (!isAuthenticated) {\n       return (\n         <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n           <form onSubmit={handleLogin} style={{ textAlign: 'center' }}>\n             <h2 style={{ marginBottom: '20px' }}>Enter Password</h2>\n             <input\n               type=\"password\"\n               value={password}\n               onChange={(e) => setPassword(e.target.value)}\n               style={{ padding: '8px', marginRight: '10px' }}\n             />\n             <button type=\"submit\" style={{\n               padding: '8px 15px',\n               backgroundColor: '#0066cc',\n               color: 'white',\n               border: 'none',\n               borderRadius: '5px',\n               cursor: 'pointer'\n             }}>\n               Login\n             </button>\n           </form>\n         </div>\n       );\n     }\n\n     return (\n       <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n         <div style={{ marginBottom: '20px', textAlign: 'center' }}>\n           <img src=\"./logo_AB.jpg\" alt=\"Company Logo\" style={{ maxWidth: '200px', height: 'auto' }} />\n         </div>\n\n         <div style={{ display: 'flex', marginBottom: '20px' }}>\n           <div style={{ width: '5%', paddingRight: '10px' }}>\n             <h2 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '10px' }}></h2>\n             <p style={{ fontSize: '14px' }}></p>\n           </div>\n\n           <div style={{ width: '90%' }}>\n             <h2 style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '15px', textAlign: 'center' }}>Aanbestedingsassistent</h2>\n             <div style={{ border: '1px solid #ccc', borderRadius: '5px', height: '500px', overflowY: 'auto', marginBottom: '15px', padding: '10px' }}>\n               {messages.map((message, index) => (\n                 <div key={index} style={{ marginBottom: '10px', textAlign: message.sender === 'user' ? 'right' : 'left' }}>\n                   <span style={{\n                     display: 'inline-block',\n                     padding: '8px 12px',\n                     borderRadius: '15px',\n                     backgroundColor: message.sender === 'user' ? '#e6f2ff' : '#f0f0f0',\n                     maxWidth: '80%'\n                   }}>\n                     <ReactMarkdown>{message.text}</ReactMarkdown>\n                   </span>\n                   {message.citations && message.citations.length > 0 && (\n                     <div className=\"mt-2 text-sm text-gray-600\">\n                       <strong>Bronnen:</strong>\n                       <ol>\n                         {message.citations.map((citation, idx) => {\n                           const displayUrl = citation.mappedUrl || citation.originalUrl;\n                           return (\n                             <li key={idx}>\n                               [{citation.index}]{' '}\n                               <a\n                                 href={displayUrl}\n                                 target=\"_blank\"\n                                 rel=\"noopener noreferrer\"\n                                 className=\"text-blue-500 hover:underline\"\n                               >\n                                 {displayUrl}\n                               </a>\n                               {citation.error && ` (${citation.error})`}\n                             </li>\n                           );\n                         })}\n                       </ol>\n                     </div>\n                   )}\n                 </div>\n               ))}\n             </div>\n             <div style={{ display: 'flex' }}>\n               <input\n                 type=\"text\"\n                 value={input}\n                 onChange={handleInputChange}\n                 onKeyPress={handleKeyPress}\n                 placeholder=\"Stel een vraag...\"\n                 style={{ flexGrow: 1, padding: '8px', borderRadius: '5px 0 0 5px', border: '1px solid #ccc' }}\n                 disabled={isLoading}\n               />\n               <button\n                 onClick={handleSendMessage}\n                 style={{\n                   padding: '8px 15px',\n                   backgroundColor: '#0066cc',\n                   color: 'white',\n                   border: 'none',\n                   borderRadius: '0 5px 5px 0',\n                   cursor: 'pointer'\n                 }}\n                 disabled={isLoading}\n               >\n                 Send\n               </button>\n             </div>\n           </div>\n\n           <div style={{ width: '5%', paddingLeft: '10px' }}>\n             <h2 style={{ fontSize: '16px', fontWeight: 'bold', marginBottom: '10px' }}></h2>\n             <p style={{ fontSize: '14px' }}></p>\n           </div>\n         </div>\n\n         <div style={{ textAlign: 'center' }}>\n           <img src=\"./logo-vandoorne.jpg\" alt=\"Company Logo\" style={{ maxWidth: '200px', height: 'auto' }}/>\n           <p>\n             Dit is een automatisch gegenereerd advies. Om zeker te zijn, neem contact op met: {' '}\n             <a href=\"mailto:Verberne@vandoorne.com\" style={{ color: '#0066cc', textDecoration: 'none' }}>\n               Gijs Verberne\n             </a>\n           </p>\n         </div>\n       </div>\n     );\n   };\n\n   export default ChatbotUI;\n","import React from 'react';\nimport ChatbotUI from './ChatbotUI';\n\nconsole.log('ChatbotUI:', ChatbotUI);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {ChatbotUI ? <ChatbotUI /> : <p>ChatbotUI not loaded</p>}\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}